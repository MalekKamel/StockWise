// Autogenerated from Pigeon (v10.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct Stock {
  var date: String
  /// Open price
  var open: Double
  /// High price
  var high: Double
  /// Low price
  var low: Double
  /// Close price
  var close: Double
  /// Volume
  var volume: Int64
  /// Adjusted close price, by splits and dividends
  var adjClose: Double

  static func fromList(_ list: [Any?]) -> Stock? {
    let date = list[0] as! String
    let open = list[1] as! Double
    let high = list[2] as! Double
    let low = list[3] as! Double
    let close = list[4] as! Double
    let volume = list[5] is Int64 ? list[5] as! Int64 : Int64(list[5] as! Int32)
    let adjClose = list[6] as! Double

    return Stock(
      date: date,
      open: open,
      high: high,
      low: low,
      close: close,
      volume: volume,
      adjClose: adjClose
    )
  }
  func toList() -> [Any?] {
    return [
      date,
      open,
      high,
      low,
      close,
      volume,
      adjClose,
    ]
  }
}
private class FlutterStocksApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Stock.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class FlutterStocksApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Stock {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FlutterStocksApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FlutterStocksApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FlutterStocksApiCodecWriter(data: data)
  }
}

class FlutterStocksApiCodec: FlutterStandardMessageCodec {
  static let shared = FlutterStocksApiCodec(readerWriter: FlutterStocksApiCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class FlutterStocksApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return FlutterStocksApiCodec.shared
  }
  func showStock(stocks stocksArg: [Stock], completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.FlutterStocksApi.showStock", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([stocksArg] as [Any?]) { _ in
      completion()
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol HostStocksApi {
  func loadStocks(symbol: String, date: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class HostStocksApiSetup {
  /// The codec used by HostStocksApi.
  /// Sets up an instance of `HostStocksApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: HostStocksApi?) {
    let loadStocksChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.HostStocksApi.loadStocks", binaryMessenger: binaryMessenger)
    if let api = api {
      loadStocksChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let symbolArg = args[0] as! String
        let dateArg = args[1] as! String
        do {
          try api.loadStocks(symbol: symbolArg, date: dateArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      loadStocksChannel.setMessageHandler(nil)
    }
  }
}
