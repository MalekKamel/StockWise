// Autogenerated from Pigeon (v10.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct Stock {
  var title: String? = nil

  static func fromList(_ list: [Any?]) -> Stock? {
    let title: String? = nilOrValue(list[0])

    return Stock(
      title: title
    )
  }
  func toList() -> [Any?] {
    return [
      title,
    ]
  }
}
private class FlutterStocksApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Stock.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class FlutterStocksApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Stock {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FlutterStocksApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FlutterStocksApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FlutterStocksApiCodecWriter(data: data)
  }
}

class FlutterStocksApiCodec: FlutterStandardMessageCodec {
  static let shared = FlutterStocksApiCodec(readerWriter: FlutterStocksApiCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class FlutterStocksApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return FlutterStocksApiCodec.shared
  }
  func showStocks(stocks stocksArg: [Stock], completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.FlutterStocksApi.showStocks", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([stocksArg] as [Any?]) { _ in
      completion()
    }
  }
}
private class HostStocksApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Stock.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class HostStocksApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Stock {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class HostStocksApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return HostStocksApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return HostStocksApiCodecWriter(data: data)
  }
}

class HostStocksApiCodec: FlutterStandardMessageCodec {
  static let shared = HostStocksApiCodec(readerWriter: HostStocksApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol HostStocksApi {
  func loadStocks(stock: Stock) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class HostStocksApiSetup {
  /// The codec used by HostStocksApi.
  static var codec: FlutterStandardMessageCodec { HostStocksApiCodec.shared }
  /// Sets up an instance of `HostStocksApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: HostStocksApi?) {
    let loadStocksChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.HostStocksApi.loadStocks", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      loadStocksChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let stockArg = args[0] as! Stock
        do {
          try api.loadStocks(stock: stockArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      loadStocksChannel.setMessageHandler(nil)
    }
  }
}
