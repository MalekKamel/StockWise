// Autogenerated from Pigeon (v10.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class Stock {
  Stock({
    required this.symbol,
    required this.companyName,
    required this.avgPrice,
    required this.quantity,
    required this.ltp,
  });

  String symbol;

  String companyName;

  double avgPrice;

  double quantity;

  double ltp;

  Object encode() {
    return <Object?>[
      symbol,
      companyName,
      avgPrice,
      quantity,
      ltp,
    ];
  }

  static Stock decode(Object result) {
    result as List<Object?>;
    return Stock(
      symbol: result[0]! as String,
      companyName: result[1]! as String,
      avgPrice: result[2]! as double,
      quantity: result[3]! as double,
      ltp: result[4]! as double,
    );
  }
}

class StockChartData {
  StockChartData({
    required this.date,
    required this.open,
    required this.high,
    required this.low,
    required this.close,
    required this.volume,
    required this.adjClose,
  });

  String date;

  /// Open price
  double open;

  /// High price
  double high;

  /// Low price
  double low;

  /// Close price
  double close;

  /// Volume
  int volume;

  /// Adjusted close price, by splits and dividends
  double adjClose;

  Object encode() {
    return <Object?>[
      date,
      open,
      high,
      low,
      close,
      volume,
      adjClose,
    ];
  }

  static StockChartData decode(Object result) {
    result as List<Object?>;
    return StockChartData(
      date: result[0]! as String,
      open: result[1]! as double,
      high: result[2]! as double,
      low: result[3]! as double,
      close: result[4]! as double,
      volume: result[5]! as int,
      adjClose: result[6]! as double,
    );
  }
}

abstract class FlutterStocksApi {
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  static void setup(FlutterStocksApi? api, {BinaryMessenger? binaryMessenger}) {
  }
}

class _HostStocksApiCodec extends StandardMessageCodec {
  const _HostStocksApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Stock) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is StockChartData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Stock.decode(readValue(buffer)!);
      case 129: 
        return StockChartData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class HostStocksApi {
  /// Constructor for [HostStocksApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HostStocksApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _HostStocksApiCodec();

  Future<List<StockChartData?>> loadStockChart(String arg_symbol, String arg_date) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostStocksApi.loadStockChart', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_symbol, arg_date]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<StockChartData?>();
    }
  }

  Future<List<Stock?>> loadStocks() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostStocksApi.loadStocks', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<Stock?>();
    }
  }
}
